{"version":3,"file":"storage.d.ts","sources":["storage.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"localforage\" />\nimport { OpaqueToken } from '@angular/core';\n/**\n * Storage is an easy way to store key/value pairs and JSON objects.\n * Storage uses a variety of storage engines underneath, picking the best one available\n * depending on the platform.\n *\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\n * the most stable and widely used file-based databases, and avoids some of the\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\n * data in low disk-space situations.\n *\n * When running in the web or as a Progressive Web App, Storage will attempt to use\n * IndexedDB, WebSQL, and localstorage, in that order.\n *\n * @usage\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\n * ```bash\n * cordova plugin add cordova-sqlite-storage --save\n * ```\n *\n * Next, install the package (comes by default for Ionic 2 apps >= RC.0)\n *\n * ```bash\n * npm install --save @ionic/storage\n * ```\n *\n * Next, add it to the providers list in your `NgModule` declaration (for example, in `src/app.module.ts`):\n *\n * ```typescript\n * import { Storage } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [\n *     // ...\n *   ],\n *   imports: [\n *     IonicModule.forRoot(MyApp)\n *   ],\n *   bootstrap: [IonicApp],\n *   entryComponents: [\n *     // ...\n *   ],\n *   providers: [\n *     Storage\n *   ]\n * })\n * export class AppModule {}\n *```\n *\n * Finally, inject it into any of your components or pages:\n * ```typescript\n * import { Storage } from '@ionic/storage';\n\n * export class MyApp {\n *   constructor(storage: Storage) {\n *\n *      storage.ready().then(() => {\n *\n *        // set a key/value\n *        storage.set('name', 'Max');\n *\n *        // Or to get a key/value pair\n *        storage.get('age').then((val) => {\n *          console.log('Your age is', val);\n *        })\n *      });\n *   }\n * }\n * ```\n *\n * ### Configuring Storage\n *\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\n *\n * Note: Any custom configurations will be merged with the default configuration\n *\n * ```typescript\n * import { Storage } from '@ionic/storage';\n *\n * export function provideStorage() {\n *   return new Storage({ name: '__mydb' });\n * }\n *\n * @NgModule({\n *   declarations: ...,\n *   imports: ...,\n *   bootstrap: ...,\n *   entryComponents: ...,\n *    providers: [\n *      { provide: Storage, useFactory: provideStorage }\n *    ]\n * })\n * export class AppModule {}\n * ```\n */\nexport declare class Storage {\n    private _dbPromise;\n    private _driver;\n    /**\n     * Create a new Storage instance using the order of drivers and any additional config\n     * options to pass to LocalForage.\n     *\n     * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\n     * default is that exact ordering.\n     */\n    constructor(config?: any);\n    /**\n     * Get the name of the driver being used.\n     * @return Name of the driver\n     */\n    readonly driver: string;\n    /**\n     * Reflect the readiness of the store.\n     * @return Promise that resolves when the store is ready\n     */\n    ready(): Promise<LocalForage>;\n    _getDriverOrder(driverOrder: any): any;\n    /**\n     * Get the value associated with the given key.\n     * @param key the key to identify this value\n     * @return Promise that resolves with the value\n     */\n    get(key: string): Promise<any>;\n    /**\n     * Set the value for the given key.\n     * @param key the key to identify this value\n     * @param value the value for this key\n     * @return Promise that resolves when the value is set\n     */\n    set(key: string, value: any): Promise<any>;\n    /**\n     * Remove any value associated with this key.\n     * @param key the key to identify this value\n     * @return Promise that resolves when the value is removed\n     */\n    remove(key: string): Promise<any>;\n    /**\n     * Clear the entire key value store. WARNING: HOT!\n     * @return Promise that resolves when the store is cleared\n     */\n    clear(): Promise<null>;\n    /**\n     * @return Promise that resolves with the number of keys stored.\n     */\n    length(): Promise<number>;\n    /**\n     * @return Promise that resolves with the keys in the store.\n     */\n    keys(): Promise<string[]>;\n    /**\n     * Iterate through each key,value pair.\n     * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n     * @return Promise that resolves when the iteration has finished.\n     */\n    forEach(iteratorCallback: (value: any, key: string, iterationNumber: Number) => any): Promise<null>;\n}\nexport declare function getDefaultConfig(): {\n    name: string;\n    storeName: string;\n    driverOrder: string[];\n};\nexport interface StorageConfig {\n    name?: string;\n    storeName?: string;\n    driverOrder?: string[];\n}\nexport declare function provideStorage(storageConfig?: StorageConfig): Storage;\nexport declare const StorageConfigToken: OpaqueToken;\n"]}